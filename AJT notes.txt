(Chapter-13) from Java the complete reference by herbert.

=>Streams:
    > A stream is an abstraction that either produces or consumes information.
    > A stream is linked to a physical device by the Java I/O system. 
    > All streams behave in the same manner, even if the actual physical devices to which they are linked differ.
    > Thus, the same I/O classes and methods can be applied to different types of devices.
    > Input stream can abstract many different kinds of input: from a disk file, a keyboard, or a network socket.
    > an output stream may refer to the console, a disk file, or a network connection.

    => Java defines two types of I/O streams: 
        1) byte :
            - Byte streams provide a convenient means for handling input and output of bytes.
            - for example reading or writing binary data.
            - At the lowest level, all I/O is still byte-oriented.
            -> 2 classes:
                a) InputStream
                b) OutputStream
        2) character :
            - Character streams provide a convenient means for handling input and output of characters. 
            - They use Unicode and, therefore, can be internationalized.
            - Character streams were added by Java 1.1 
             -> 2 classes:
                a) Reader
                b) Writer
                - Two of the most important methods are read( ) and write( ), which read and write characters of data, respectively.

                > read():
                    - syntax: int read( ) throws IOException
                    - Each time that read( ) is called, it reads a character from the input stream and returns it as an integer value.
                    - it returns -1 when reached to end of the stream.
                    - it also refered as a blocking method.
                
                > write():
                    - void write(int byteval)
                    - his method writes the byte specified by byteval. Although byteval is declared as an integer, only the low-order eight bits are written.
                    - example:
                        class WriteDemo {
                            public static void main(String[] args) {
                                int b;
                                b = 'A';
                                System.out.write(b);
                                System.out.write('\n');
                            }
                        }

    => The Predefined Streams:
        1) System.in -> object of type InputStream
        2) System.out -> object of type PrintStream
        3) System.err -> PrintStream


(Chapter-22) from Java the complete reference by herbert.

=> There are three interfaces that are quite important to the stream classes:
    1) Closeable 2) Flushable -> They are defined in java.io.
    3) AutoCloseable ->  is packaged in java.lang.

=> InputStream:
    - abstract class
    - implements the AutoCloseable and Closeable interfaces.
    1) FileInputStream class:
        - The FileInputStream class creates an InputStream that you can use to read bytes from a file.
        - Two commonly used constructors are shown here:
            - FileInputStream(String filePath)
                -eg FileInputStream f0 = new FileInputStream("/autoexec.bat")
            - FileInputStream(File fileObj)
                -eg File f = new File("/autoexec.bat");
                    FileInputStream f1 = new FileInputStream(f);
    2) ByteArrayInputStream:
        - ByteArrayInputStream is an implementation of an input stream that uses a byte array as the source.
        - The close( ) method has no effect on a ByteArrayInputStream.
        - Two constructors:
            ByteArrayInputStream(byte[ ] array)
            ByteArrayInputStream(byte[ ] array, int start, int numBytes)
            -eg class ByteArrayInputStreamDemo {
                    public static void main(String[] args) {
                        String tmp = "abcdefghijklmnopqrstuvwxyz";
                        byte[] b = tmp.getBytes();
                        ByteArrayInputStream input1 = new ByteArrayInputStream(b);
                        ByteArrayInputStream input2 = new ByteArrayInputStream(b,0,3);
                    }
                }

    3) BufferedInputStream:
        - Buffering I/O is a very common performance optimization. 
        - Javaâ€™s BufferedInputStream class allows you to "wrap" any InputStream into a buffered stream to improve performance.
        - BufferedInputStream has two constructors:
            BufferedInputStream(InputStream inputStream)
            BufferedInputStream(InputStream inputStream, int bufSize)
    
    4) PushbackInputStream:
        - Pushback is used on an input stream to allow a byte to be read and then returned (that is, "pushed back") to the stream.
        - It provides a mechanism to "peek" at what is coming from an input stream without disrupting it.
        - Two constructors:
            PushbackInputStream(InputStream inputStream)
            PushbackInputStream(InputStream inputStream, int numBytes) 
        - methods:
            void unread(int b)
            void unread(byte[ ] buffer)
            void unread(byte buffer, int offset, int numBytes)

    5) SequenceInputStream:
        - The SequenceInputStream class allows you to concatenate multiple InputStreams.
        - The construction of a SequenceInputStream is different from other InputStream.
        - A SequenceInputStream constructor uses either a pair of InputStreams or an Enumeration of InputStreams as its argument:
            SequenceInputStream(InputStream first, InputStream second)
            SequenceInputStream(Enumeration <? extends InputStream> streamEnum)
        - Closing the stream created by
        - SequenceInputStream causes all unclosed streams to be closed.

    6) DataOutputStream and DataInputStream:
        - DataOutputStream and DataInputStream enable you to write or read primitive data to or from a stream.
        - They implement the DataOutput and DataInput interfaces, respectively.
        - These interfaces define methods that convert primitive values to or from a sequence of bytes. 
        - DataOutputStream extends FilterOutputStream, which extends OutputStream.

=> OutputStream:
    - abstract class
    - implements the AutoCloseable, Closeable and Flushable interfaces.
    1) FileOutputStream class:
        - FileOutputStream creates an OutputStream that you can use to write bytes to a file.
        - Two commonly used constructors are shown here:
            - FileOutputStream(String filePath) OR FileOutputStream(String filePath,boolean append)
                -eg FileOutputStream f0 = new FileOutputStream("autoexec.bat")
            - FileOutputStream(File fileObj) OR FileOutputStream(File fileObj,boolean append)
                -eg File f = new File("autoexec.bat");
                    FileOutputStream f1 = new FileOutputStream(f);

    2) ByteArrayOutputStream:
        - ByteArrayOutputStream is an implementation of an output stream that uses a byte array as the destination. 
        - The close( ) method has no effect on a ByteArrayInputStream.
        - ByteArrayOutputStream has two constructors, shown here:
            ByteArrayOutputStream( )
            ByteArrayOutputStream(int numBytes)
        - In the first form, a buffer of 32 bytes is created. In the second, a buffer is created with a size equal to that specified by numBytes.

    3) BufferedOutputStream:
        - A BufferedOutputStream is similar to any OutputStream with the exception that the flush( ) method is used to ensure that data buffers are written to the stream being buffered.
        - Since the point of a BufferedOutputStream is to improve performance by reducing the number of times the system actually writes data.
        - Unlike buffered input, buffering output does not provide additional functionality
        - Two available constructors:
            BufferedOutputStream(OutputStream outputStream)
            BufferedOutputStream(OutputStream outputStream, int bufSize)
    